configuration:
  inputs: # SUT inputs (e.g., commands to SUT), triggers log entry
    - identifier: "/robot_0/move_base" # topic/service proxy name (with full namespace, i.e., "/robot/odom")
      proxy: "/robot_0/move_base/proxy" # advertised proxy service name (reroutes the service to "identifier" service); if empty (""), "topic"-mode is assumed
      type: "move_base_msgs.msg.MoveBaseAction" # topic/service proxy as string (e.g., "std_srvs.srv.Int32"); supports services ("srv"), topics ("msg") and actions ("Action")
      timeout: 120 # maximum time in seconds to wait for feedback
      feedback:
        topic: "/robot_0/move_base/result" # feedback topic for asynchronous command (e.g., "/robot_0/move_base/result"); If using service proxy mode, leave empty ("") to use service proxy result as feedback; If in "topic"-mode and left empty (""), command is considered to be a success without feedback
        type: "move_base_msgs.msg.MoveBaseActionResult" # feedback topic type (e.g., "move_base_msgs.msg.MoveBaseActionResult")
        field: "status.text" # feedback topic field (e.g., "status.text")
        success: "Goal reached" # regex to consider action as a success (e.g., "Goal reached.") or value (in case of non-string)
        failure: "" # regex to consider action as a failure or value (in case of non-string
    - identifier: "/robot_0/topological_navigation" # topic/service proxy name (with full namespace, i.e., "/robot/odom")
      proxy: "/robot_0/topological_navigation/proxy" # advertised proxy service name (reroutes the service to "identifier" service); if empty (""), "topic"-mode is assumed
      type: "topological_navigation.msg.GotoNodeAction" # topic/service proxy as string (e.g., "std_srvs.srv.Int32"); supports services ("srv"), topics ("msg") and actions ("Action")
      timeout: 120 # maximum time in seconds to wait for feedback
      feedback:
        topic: "" # feedback topic for asynchronous command (e.g., "/robot_0/move_base/result"); If using service proxy mode, leave empty ("") to use service proxy result as feedback; If in "topic"-mode and left empty (""), command is considered to be a success without feedback
        type: "" # feedback topic type (e.g., "move_base_msgs.msg.MoveBaseActionResult")
        field: "" # feedback topic field (e.g., "status.text")
        success: "" # regex to consider action as a success (e.g., "Goal reached.") or value (in case of non-string)
        failure: "" # regex to consider action as a failure or value (in case of non-string
    - identifier: "/robot_0/request_nomotion_update" # topic/service proxy name (with full namespace, i.e., "/robot/odom")
      proxy: "/robot_0/request_nomotion_update/proxy" # advertised proxy service name (reroutes the service to "identifier" service); if empty (""), "topic"-mode is assumed
      type: "std_srvs.srv.Empty" # topic/service proxy as string (e.g., "std_srvs.srv.Int32"); supports services ("srv"), topics ("msg") and actions ("Action")
      timeout: 120 # maximum time in seconds to wait for feedback
      feedback:
        topic: "" # feedback topic for asynchronous command (e.g., "/robot_0/move_base/result"); If using service proxy mode, leave empty ("") to use service proxy result as feedback; If in "topic"-mode and left empty (""), command is considered to be a success without feedback
        type: "" # feedback topic type (e.g., "move_base_msgs.msg.MoveBaseActionResult")
        field: "" # feedback topic field (e.g., "status.text")
        success: "" # regex to consider action as a success (e.g., "Goal reached.") or value (in case of non-string)
        failure: "" # regex to consider action as a failure or value (in case of non-string

  outputs: # SUT outputs (monitored values)
    - identifier: "/robot_0/odom" # topic (with full namespace, i.e., "/robot/odom")
      type: "nav_msgs.msg.Odometry" # topic as string delimited with a period sign (e.g., "std_msgs.msg.Int32")
      resolution: # resolution/rounding to reduce state space (i.e., if resolution is 0.1, then 19.22 -> 19.2 and 19.26 -> 19.3); In case no rounding is desired or type is non-numeric, set resolution to 0
        - field: "pose.pose.position.x"
          resolution: 0.1
      buffer:
        size: 3 # number of elements in the ring buffer
        hz: 1 # max frequency to update the buffer
        mode: "avg" # the operation to apply on the buffer to compute the logged value (supported are "min", "max" or "avg")
