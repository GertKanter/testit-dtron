// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xtaproto.proto

#ifndef PROTOBUF_xtaproto_2eproto__INCLUDED
#define PROTOBUF_xtaproto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_xtaproto_2eproto();
void protobuf_AssignDesc_xtaproto_2eproto();
void protobuf_ShutdownFile_xtaproto_2eproto();

class Variable;
class Sync;

// ===================================================================

class Variable : public ::google::protobuf::Message {
 public:
  Variable();
  virtual ~Variable();
  
  Variable(const Variable& from);
  
  inline Variable& operator=(const Variable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Variable& default_instance();
  
  void Swap(Variable* other);
  
  // implements Message ----------------------------------------------
  
  Variable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Variable& from);
  void MergeFrom(const Variable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // required sint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Variable)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::int32 value_;
  friend void  protobuf_AddDesc_xtaproto_2eproto();
  friend void protobuf_AssignDesc_xtaproto_2eproto();
  friend void protobuf_ShutdownFile_xtaproto_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Variable* default_instance_;
};
// -------------------------------------------------------------------

class Sync : public ::google::protobuf::Message {
 public:
  Sync();
  virtual ~Sync();
  
  Sync(const Sync& from);
  
  inline Sync& operator=(const Sync& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Sync& default_instance();
  
  void Swap(Sync* other);
  
  // implements Message ----------------------------------------------
  
  Sync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sync& from);
  void MergeFrom(const Sync& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // repeated .Variable variables = 2;
  inline int variables_size() const;
  inline void clear_variables();
  static const int kVariablesFieldNumber = 2;
  inline const ::Variable& variables(int index) const;
  inline ::Variable* mutable_variables(int index);
  inline ::Variable* add_variables();
  inline const ::google::protobuf::RepeatedPtrField< ::Variable >&
      variables() const;
  inline ::google::protobuf::RepeatedPtrField< ::Variable >*
      mutable_variables();
  
  // optional int64 timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Sync)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::RepeatedPtrField< ::Variable > variables_;
  ::google::protobuf::int64 timestamp_;
  friend void  protobuf_AddDesc_xtaproto_2eproto();
  friend void protobuf_AssignDesc_xtaproto_2eproto();
  friend void protobuf_ShutdownFile_xtaproto_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Sync* default_instance_;
};
// ===================================================================


// ===================================================================

// Variable

// required string name = 1;
inline bool Variable::has_name() const {
  return _has_bit(0);
}
inline void Variable::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Variable::name() const {
  return *name_;
}
inline void Variable::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Variable::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Variable::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Variable::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// required sint32 value = 2;
inline bool Variable::has_value() const {
  return _has_bit(1);
}
inline void Variable::clear_value() {
  value_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 Variable::value() const {
  return value_;
}
inline void Variable::set_value(::google::protobuf::int32 value) {
  _set_bit(1);
  value_ = value;
}

// -------------------------------------------------------------------

// Sync

// required string name = 1;
inline bool Sync::has_name() const {
  return _has_bit(0);
}
inline void Sync::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Sync::name() const {
  return *name_;
}
inline void Sync::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Sync::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Sync::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Sync::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// repeated .Variable variables = 2;
inline int Sync::variables_size() const {
  return variables_.size();
}
inline void Sync::clear_variables() {
  variables_.Clear();
}
inline const ::Variable& Sync::variables(int index) const {
  return variables_.Get(index);
}
inline ::Variable* Sync::mutable_variables(int index) {
  return variables_.Mutable(index);
}
inline ::Variable* Sync::add_variables() {
  return variables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Variable >&
Sync::variables() const {
  return variables_;
}
inline ::google::protobuf::RepeatedPtrField< ::Variable >*
Sync::mutable_variables() {
  return &variables_;
}

// optional int64 timestamp = 3;
inline bool Sync::has_timestamp() const {
  return _has_bit(2);
}
inline void Sync::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 Sync::timestamp() const {
  return timestamp_;
}
inline void Sync::set_timestamp(::google::protobuf::int64 value) {
  _set_bit(2);
  timestamp_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_xtaproto_2eproto__INCLUDED
